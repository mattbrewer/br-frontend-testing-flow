{
  "name": "divshot-api",
  "version": "0.8.1",
  "description": "Wrapper for the Divshot api",
  "main": "lib/Divshot.js",
  "scripts": {
    "build": "grunt build",
    "test": "echo 'PASS'"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/divshot/divshot-api.git"
  },
  "author": {
    "name": "Divshot"
  },
  "license": "BSD",
  "bugs": {
    "url": "https://github.com/divshot/divshot-api/issues"
  },
  "devDependencies": {
    "cli-easy": "0.1.0",
    "vows": "0.6.1",
    "grunt": "~0.4.4",
    "chai": "~1.8.0",
    "proxyquire": "~0.5.1",
    "sinon": "~1.7.3",
    "mocksy": "~0.1.4",
    "grunt-contrib-uglify": "~0.2.5",
    "browserify": "~2.35.1",
    "grunt-browserify": "~1.2.11",
    "grunt-contrib-watch": "~0.5.3"
  },
  "dependencies": {
    "lodash.defaults": "~2.2.1",
    "form-data": "~0.1.2",
    "async": "~0.2.9",
    "narrator": "0.6.x",
    "promise": "~4.0.0",
    "btoa": "1.1.x"
  },
  "readme": "# Divshot API\n\nWrapper for the Divshot API. \n\n### Contents\n\n* [Instantiate](#instantiate)\n* [Angular Module](#angular-module)\n* [User](#user)\n  * [Password](#user-password)\n  * [Emails](#user-emails)\n* [Organizations](#organizations)\n  * [Members](#organization-members)\n* [Apps](#apps)\n  * [Builds](#builds)\n  * [Releases](#releases)\n  * [Domains](#domains)\n  * [Environment Configuration](#app-environment-configuration)\n  * [Subscription](#subscription)\n\n## Install\n\nNPM\n\n```\nnpm install divshot-api --save\n```\n\nBower\n\n\n```\nbower install divshot --save\n```\n\n## Usage\n\nRefer to the [Narrator](https://github.com/scottcorgan/narrator) api for a more in depth understanding of all available methods.\n\n**CommonJS (Node/Browserify)**\n\n```js\nvar Divshot = require('divshot');\n```\n\n**Standalone**\n```\n<script src=\"/path/to/divshot.standalone.min.js\"></div>\n```\n\n###Instantiate\n\n```js\nvar api = Divshot.createClient({\n  client_id: '123abc', // MUST be specified\n  \n  email: 'someone@divshot.com',\n  password: 'somepassword123!',\n  \n  // OR\n  \n  token: 'your divshot access token'\n});\n```\n\n###Browser Authentication\n\nThe Divshot API wrapper provides a simple, popup-based authentication mechanism for\neasily authenticating a user without requiring the handling of usernames or passwords.\nTo use browser authentication, simply instantiate a client and call the `auth` method:\n\n**divshot.auth(type, options, callback)**\n\nThis method returns a promise but takes an optional callback. `type` should be either\n`password` or `github` (defaults to `password`).\n\n```js\nvar api = Divshot.createClient({client_id: 'abc123'});\n\ndivshot.auth().then(function(response) {\n  response.user; // user details\n  response.access_token; //access token\n}, function (error) {\n  // do something with an error\n});\n```\n\n#### Password Authentication\n\nIf you need to accept an email and password directly, you can do so as in the following example.\nPasswords **MUST NOT** be stored and should only come from direct user input (e.g. a form field).\n\n```js\ndivshot.auth('password', {email: 'abby@example.com', password: 'test123'}).then(function(response) {\n  // works just as above\n}, function (error) {\n  // ditto\n});\n```\n\n#### Cookie Token Storage\n\nFor convenience, the `auth` method allows you to store a cookie with an encoded access token\nto keep the user logged into Divshot. Simply pass the `store: true` option to `auth`:\n\n```js\napi.auth({store: true}, function(error, token, user){\n  // ...\n});\n```\n\nThis will automatically create a cookie on the current domain to store the access token for one\nweek. On subsequent page loads you can use the `authWithCookie()` method to authenticate a client\nbased on the cookie. This method will return `true` if a cookie was found and `false` otherwise.\n\n```js\nif (api.authWithCookie()) {\n  // cookie found, api is now authenticated and can\n  // make calls to retrieve protected resources\n} else {\n  // no cookie found, display an auth button etc\n}\n```\n\n###Angular Module\n\nLocated at ` /dist/divshot.angular.js `\n\n```js\nangular.module('myApp', ['divshot'])\n  .config(function (divshotProvider) {\n    divshotProvider.configure({\n      token: 'divshot_api_access_token'\n    });\n  }).\n  controller('SomeCtrl', function ($scope, divshot) {\n    \n    $scope.apps = divshot.apps.list();\n    \n  });\n```\n\n#### Custom XHR arguments\n\nCustom XHR arguments can be set to be sent with each request. Refer to Angular's [$http](http://docs.angularjs.org/api/ng/service/$http#usage) documentation for which arguments are supported.\n\n```js\nangular.module('myApp', ['divshot'])\n  .config(function (divshotProvider) {\n    divshotProvider.configure({\n      token: 'divshot_api_access_token'\n    });\n  }).\n  controller('SomeCtrl', function ($scope, divshot) {\n    divshot.withCredentials(true);\n    // or\n    divshot.xhr('withCredentials', true);\n  });\n```\n\n###User\n\nBy default, the ` authenticate ` method will be called on each request as a pre hook. If a token is provided, this does not create another http request.\n\n```js\napi.user.authenticate(function (err, token) {\n  \n});\n\napi.user.setCredentials({\n  email: 'someone@divshot.com',\n  password: 'somepassword123!',\n  \n  // OR\n  \n  token: 'some_really_long_access_token_from_divshot'\n});\n\n// User data\napi.user.self().then(function (user) {\n  \n});\n// OR\napi.user.id(userId).get().then(function (user) {\n  \n});\n\n// Update user\nvar user = api.user.id(userId);\nuser.update({\n  name: 'First Last'\n}).then(function (user) {\n  \n});\n\n// Set welcomed for new users\napi.user.setWelcomed().then(function () {\n\n});\n\n// Delete account\napi.user.deleteAcccount(user@email.com).then(function () {\n  \n});\n\n```\n\n#### User password\n\n```js\n// Change password\ndivshot.user.password.update({\n  password: 'Password123',\n  password_confirm: 'Password123'\n}).then(function (res) {\n  \n});\n\n// Reset password if forgotten\ndivshot.password.reset(userId).then(function (res) {\n  \n});\n```\n\n#### User Emails\n\n```js\n// Add email\ndivshot.user.emails.add('something@aol.com').then(function (res) {\n  \n});\n\n// Set primary email\ndivshot.user.emails.primary('something@aol.com').then(function (res) {\n  \n});\n\n// Remove email\ndivshot.user.emails.remove('something@aol.com').then(function (res) {\n  \n});\n\n// Resend email\ndivshot.user.emails.resend('something@aol.com').then(function (res) {\n  \n});\n```\n\n### Organizations\n\n```js\n// Users orgs\ndivshot.organizations.list().then(function (orgs) {\n  \n});\n\n// A single organization\ndivshot.organizations.id(someOrgId).get().then(function (org) {\n  \n});\n\n// Apps from an organization\ndivshot.organizations.id(someOrgId).apps.list().then(function (apps) {\n  \n});\n\n// Create organization\ndivshot.organizations.create({\n  name: 'name',\n  nick: 'nick',\n  billing_email: 'someone@aol.com',\n  gravatar_email: 'someone@aol.com'\n}).then(function (res) {\n  \n});\n\n// Update organization\ndivshot.organizations.id(someOrgId).update({\n  name: 'name',\n  billing_email: 'someone@aol.com',\n  gravatar_email: 'someone@aol.com',\n  etc: 'other stuff'\n}).then(function (res) {\n  \n});\n```\n\n### Organization Members\n\n```js\n// Get org members\ndivshot.organizations.id(someOrg).members.list().then(function (members) {\n  \n});\n\n// Invite members to organization\ndivshot.organizations.id(someOrg).members.create({\n  name: email,\n  email: email\n}).then(function (res) {\n  \n});\n\n// Update a member in organiztion\ndivshot.organizations.id(someOrg).members.id(memberid).update({\n  admin: false // or true\n}).then(function (res) {\n  \n});\n\n// Remove a member from an organization\ndivshot.organizations.id(someOrg).members.id(memberId).remove().then(function () {\n  \n});\n\n```\n\n### Apps\n\n```js\n// List apps\napi.apps.list().then(function (apps) {\n  \n});\n\n// Create an app\napi.apps.create('app-name').then(function (app) {\n  \n});\n\n// Create an app from object\napi.apps.createFromObject(params).then(function (app) {\n  \n});\n\n// A specific app\nvar app = api.apps.id('app name');\napp.get().then(function (app) {\n  \n});\n\n// Delete an app\napp.remove().then(function (res) {\n\n});\n```\n\n### Builds\n\n```js\napp.builds.list(function (err, builds) {\n  \n});\n\napp.builds.id('build id').get(function (err, build) {\n  // Specific build by id\n});\n\napp.builds.id('build id').finalize(function (err, response) {\n  \n});\n\napp.builds.id('build id').release('production', function (err, response) {\n  \n});\n```\n\n###Releases\n\n```js\napp.releases.list(function (err, releases) {\n  \n});\n\napp.releases.env('production').get(function (err, release) {\n  // Release by environment\n});\n\napp.releases.env('production').rollback(function (err, response) {\n  \n});\n\n// Rollback to specific version\napp.releases.env('production').rollbackTo('v12').then(function () {\n  \n});\n\napp.releases.env('production').promote('staging', function (err, callback) {\n  // Here, \"staging\" is the from environment\n  // and \"production\" is the to-environment\n});\n```\n\n###Domains\n\n```js\n// List domains for an app\napp.domains.list().then(function(domains) {\n  \n});\n\n// Add a domain\napp.domains.add('www.domain.com').then(function (response) {\n  \n});\n\n// Remove a domain\napp.domains.remove('www.domain.com').then(function (response) {\n  \n});\n\n```\n\n### Subscription\n\nUpdate data associated with an App's subscription\n\n```js\napp.subscription.update('card number').then(function (res) {\n  \n});\n```\n\n###App Environment Configuration\n\n```js\napp.env('development').config({\n  auth: 'username:password'\n}, function (err, response) {\n  \n});\n```\n\n## Build\n\n```\ngrunt build\n```\n\n\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/divshot/divshot-api",
  "_id": "divshot-api@0.8.1",
  "_shasum": "970b915cb7d52a9824f30010952a9eeea58ccbc6",
  "_from": "divshot-api@0.8.1",
  "_resolved": "https://registry.npmjs.org/divshot-api/-/divshot-api-0.8.1.tgz"
}
