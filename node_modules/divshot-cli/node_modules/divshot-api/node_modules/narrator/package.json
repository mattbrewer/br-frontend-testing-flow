{
  "name": "narrator",
  "version": "0.6.3",
  "description": "Construct wrappers around api RESTful endpoints (Browser/Angular/Node)",
  "main": "lib/narrator.js",
  "scripts": {
    "test": "jshint lib/ && node_modules/.bin/mocha --recursive --reporter spec ./test",
    "build": "jshint lib/ && grunt build"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/scottcorgan/narrate.git"
  },
  "keywords": [
    "api",
    "endpoint",
    "rest",
    "wrapper"
  ],
  "author": {
    "name": "Scott Corgan"
  },
  "license": "BSD",
  "bugs": {
    "url": "https://github.com/scottcorgan/narrate/issues"
  },
  "dependencies": {
    "request": "~2.27.0",
    "url-join": "0.0.1",
    "extend": "~1.2.1",
    "browser-request": "~0.3.1",
    "reqwest": "~0.9.3",
    "promise": "~3.2.0"
  },
  "devDependencies": {
    "mocha": "~1.13.0",
    "chai": "~1.8.0",
    "mocksy": "0.1.x",
    "sinon": "~1.7.3",
    "jshint": "~2.3.0",
    "http-browserify": "~0.1.13",
    "browserify": "~2.35.1",
    "colors": "~0.6.2",
    "grunt": "~0.4.1",
    "grunt-contrib-uglify": "~0.2.5",
    "grunt-browserify": "~1.2.11",
    "grunt-contrib-watch": "~0.5.3",
    "grunt-complexity": "~0.1.3"
  },
  "browser": {
    "request": "./lib/core/browser_http.js"
  },
  "readme": "# Narrator\n\nBuild api wrappers around RESTful endpoints. Now compatible with AngularJS and [Browserify](https://github.com/substack/node-browserify)!\n\n## Install\n\nOn the server\n\n```\nnpm install narrator --save\n```\n\nIn the browser\n\n```\nbower install narrator --save\n```\n\n## Usage\n\n\n```javascript\nvar Narrator = require('narrator');\n\nvar api = new Narrator({\n  host: 'http://someendpoint.com'\n});\n\n// This will construct http://someendpoint.com/endpoint\nvar users = api.endpoint('users', {\n  customMethod: function () {\n    // You can have custom functionality\n  }\n});\n\nusers.list(function (err, usersList) {\n\n});\n\n// OR\n\n// With promises\nusers.create({name: 'frank'}).then(function (response) {\n  // User created\n});\n\n// OR\n\nusers.customMethod();\n\n// AND\n\nvar user = users.one(123);\nuser.get(function (err, userData) {\n\n});\n```\n\nAlso, see [Narrator Examples](https://github.com/scottcorgan/narrator/tree/master/examples)\n\n## Angular Module\n\n```javascript\nangular.module('myApp', ['narrator'])\n  .config(function (narratorProvider) {\n    narratorProvider.configure({\n      host: 'http://someapi.com',\n      headers: {}\n      // etc. Supports all $http config options\n    });\n  }).controller('SomeCtrl', function ($scope, narrator) {\n    \n    $scope.users = narrator.endpoint('users').list();\n    \n  });\n```\n\n### XHR Arguments\n\nThe Angular module provides special methods to set custom xhr arguments. They conform to the [$http](http://docs.angularjs.org/api/ng/service/$http#usage) arguments usage.\n\n```js\nangular.module('myApp')\n  .controller('SomeController', function ($scope, narrator) {\n    \n    narrator.withCredentials(true);\n    \n    // or\n    narrator.xhr('withCredentials', true);\n    \n  });\n```\n\n## Promises or Callbacks\n\nAll methods return a promise or allow you to provide a callback. For example:\n\n```javascript\napi.endpoint('users').list().then(function (users) {\n  \n}, function (err) {\n  \n});\n\n// OR\n\napi.endpoint('users').list(function (err, users) {\n  \n});\n```\n\n\n## Multi-item endpoint\n\nExample:\n\n```javascript\nvar users = api.endpoint('users');\n\n// users.url();\n// users.list();\n// users.create();\n// users.one();\n// users.getEndpoint();\n```\n\n### url()\n\nReturns the url for the current endpoint\n\n### list(callback)\n\nPerforms a ` GET ` request to the api for the given path name\n\n* ` callback ` - gets called with the arguments:\n  * **err** - error object if one exists\n  * **response** - the response from the server\n\n### create(payload, callback)\n\nPerforms a ` POST ` request to the api for the given path name\n\n* ` payload ` - the key-value object to send with the request\n* ` callback ` - gets called with the arguments:\n  * **err** - error object if one exists\n  * **response** - the response from the server\n\n### one(id)\n\nCreates an new single item endpoint with the given id from the mult-item endpoint path. This method returns a new object with the single item methods (see below)\n\n* ` id ` - the id of the single item to create and endpoint form\n\n### getEndpoint(name [, id]);\n\nGets an endpoint by the endpoint pathname. If the endpoint you're getting is a singular item endpoint with and id, pass the id along.\n\n* ` name ` - the pathname of the endpoint\n* ` id ` - the id of the singular resource used when creating the path\n\n## Single-item endpoint\n\nExample:\n\n```javascript\nvar users = api.endpoint('users');\nvar user = users.one(123); // Generats /user/123\n\n// user.url();\n// user.get();\n// user.update();\n// user.remove();\n// user.endpoint();\n// user.getEndpoint();\n```\n\n### url()\n\nReturns the url for the current endpoint\n\n### get(callback)\n\n* ` callback ` - gets called with the arguments:\n  * **err** - error object if one exists\n  * **response** - the response from the server\n\n### update(payload, callback)\n\n* ` payload ` - the key-value object to send with the request\n* ` callback ` - gets called with the arguments:\n  * **err** - error object if one exists\n  * **response** - the response from the server\n\n### remove(callback)\n\n* ` callback ` - gets called with the arguments:\n  * **err** - error object if one exists\n  * **response** - the response from the server\n\n### endpoint(name, customMethods)\n\nThis creates a new endpoint prefixed by the endpoint path that called this method. (i.e ` /users/123/comments `). VERY helpful for creating nested endpoints.\n\n* ` name ` - the name of the endpoing, which is used to build the path (i.e. ` users ` creates the path ` /users `)\n* ` customMethods ` - an object contain custom methods to add to the endpoint object\n\n### getEndpoint(name [, id]);\n\nGets an endpoint by the endpoint pathname. If the endpoint you're getting is a singular item endpoint with and id, pass the id along.\n\n* ` name ` - the pathname of the endpoint\n* ` id ` - the id of the singular resource used when creating the path\n\n## Run Tests\n\n```\nnpm test\n```\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/scottcorgan/narrate",
  "_id": "narrator@0.6.3",
  "_shasum": "d51e61cebdad675be3c699dfc16fb98f3ba434c6",
  "_from": "narrator@0.6.x",
  "_resolved": "https://registry.npmjs.org/narrator/-/narrator-0.6.3.tgz"
}
